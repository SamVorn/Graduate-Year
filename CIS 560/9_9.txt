JFLAD
    Java Formal Languages & Automata Package
Automata
    DFA/NFA - PDA - Turing Machine
Formal Languages
    Regular Lang - context free

Chapter 0
Sets
    collection of distinguishable objects
        no duplicates
        order does not matter
    {2, 5, 7}
    objects in a set are members or elements
    {5, 2, 7} is the same set
    {2, 5, 5, 7} is NOT the same set
    If a set contains zero elements, it is the empty set: {}
    Power set of A: 
        the set of all subsets of A
        A = {1, 2}
        Power Set = {{1}, {2}, {1,2}, {empty set}}
        Size of A is n
        Size of power set should be 2^n
Sequence
    a list of objects in some order
    (2, 7, 9) != (7, 2, 9)
    allows duplicates 
    finite sequence = tuple
Cartesian Product/Cross Product
    takes two Sets
    A x B is defined as a set of all pairs
    A = {x, y} B = {1, 2}
        A x B = {(x, 1), (x, 2), (y, 1), (y, 2)}
    A x B != B x A
    A x B does equal B x A when A = B or A is the empty set
    If A is the empty set, A x B = the empty set
Function
    A mapping from an input value to an output value
    f(a)=b 
        we map a onto b
    a is element of set A = set of all possible inputs (domain)
    b is element of set B = set of all possible outputs (co-domain, range)
    1. f: A -> B
    2. define the relationship between elements in A & B

    1. f: A -> B
        A = {x, y, z, ....}
        B = N : the set of natural numbers
    2. define relationship
        name | age
        x    | 22
        y    | 24
        z    | 22
    Age is the range R
    R is a subset of the co-domain
    If R = B then we call this function an onto function
    A function input can only have a single output
    A function input must have a corresponding output
    If all input values map to different output values this is one-to-one
    If a function is one-to-one and also onto, then it is called a correspondance
        |A| = |B|
    A = {1, 2, 3}
    B = {2, 4, 6}
        1 -> 2
        2 -> 4
        3 -> 6
        Size of A and B are the same = 3
    N: the set of natural numbers {1, 2, 3, 4, ...}
    E: the set of positive even numbers {2, 4, 6, 8, ...}
    Is |N| > |E|
        no they are the same
        f(n) = 2n
String 
    a string over an alphabet is a finite sequence of symbols from that alphabet
    an alphabet is a finite set of symbols
    E = {0, 1}
    w = (0, 1, 1, 0, 0, 1)
        011001
        is a string from alphabet E
    When the sequence contains zero elements |w| = 0
        this is an empty string
        Denoted by Epsilon
Language
    A set of strings
    {011, 110, 111}
        finite language containing 3 strings
    {01, 001, 0001, 0001, ...}
        infinite language
        prove any string is not infinite by denoting k position in which it will have k 0's
Proofs
    Construction
        if it is this just construct it, make it
    Contradiction
        assume its true and bring some contradiction and prove its false
    Induction
        some base case, then show that the statement is true for any integer K 
        this statement is true for any integer k+1
    never prove by examples, you have to cover ALL cases
    if we want to prove something is not true we can use a counter-example
    In order to prove everyone has registered for the class, he has to check everyone 
    If he wants to prove this is not true, he has to find a singlular example of someone not registered


Chapter 1
Finite Automata (FA)
    finite amount of states
    1. turn on the light
    0. turn off the light
    
    1. Can an FA have 0 accept states
    2. Can an FA have 0 or more than 1 transition exiting a state for
    each possible input symbol. 
    3. Can an accept/final state be the same state as the start state

    Def. A finite automaton is a 5-tuple 
        Q is a finite set of states
        Sigma is a finite set of symbols -> alphabet
        Delta = Q x Sigma -> Q is the transition function
        Q0 is the start state
        F is the set of accept states

For every state in an FA, there is exactly one exiting transition for each possible input symbol
