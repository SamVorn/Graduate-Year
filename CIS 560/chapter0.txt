Automata, computability, and complexity

What are the fundamental capabilities and limitations of computers?

Complexity Theory
    Computer problems come in different varieties
    sorting problem is easy but scheduling problem is harder
    What makes some problems computationally hard and others easy?
    Scheme for classifying problems according to their computational difficulty
    analogous to the periodic tablets
    Several options when confronting a problem that appears to be 
    computationally hard.
    1. Understand which aspect of the problem is at the root of the 
    difficulty, you may be able to alter it so that the problem is more 
    easily solvable
    2. settle for less than a perfect solution to the problem 
    finding solutions that only approximate the perfect one is relatively 
    easy 
    3. some problems are hard only in the worst case situation, but easy in 
    most cases, you may be satisfied with a procedure that is occasionally slow 
    but usually runs quickly
Computability Theory 
    Certain basic problems cannot be solved by computers 
    Ex: determining whether a mathematical statement is true or false 
    Theories of computability and complexity are closely related 
    In complexity theory, the objective is to classify problems as easy ones and 
    hard ones; whereas in computability theory the classification of problems is 
    by those that are solvable and those that are not 
Automata Theory 
    Deals with the definitions and properties of mathematical models of computation 
    Finite automaton is used in text processing, compliers, and hardware design
    context-free grammar is used in programming languages and AI
    Theories of computability and complexity require a precise definition of a computer 
    automata theory allows practice with formal definitions of computation 


Mathematical Notations and Terminology

Sets
    a group of objects represented as a unit
    may contain any type of object, including numbers, symbols, and other sets
    Objects in a set are called elements or members
    Described formally in many ways
        Listing in braces: S = {7, 21, 57}
    The symbols ∈ and /∈ donate set membership and nonmembership
    The set with zero members is called the empty set and is written as 0
    the set with one member is sometimes called a singleton set
    two members is called an unordered pair
    when we want to describe a set containing elements according to some rule we
    write {n| rule about n}
    Thus {n| n=m^2 for some m ∈ N}
    If we have two sets A and B, the Union of A and B is the set we get by combining all 
    elements of A and B into a single set
    The intersection of A and B is the set of elements that are both in A and B
    The compliment of A is the set of all elements under consideration that are not in A
Sequences and Tuples
    a sequence of objects is a list of these objects in some order
    Designated by writing the list in parentheses
    The sequence 7, 21, 57 would be written (7, 21, 57)
    The order doesnt matter in a set but it does in a sequence
    Repetition does matter in a sequence but doesnt matter in a set
    As with sets, sequences may be finite or infinite
    Finite sequences are called tuples
        a sequence with K elements is called a K-tuuple
        a 2 tuple is called an ordered pair
Functions and Relations
    a Function is an object that sets up an input-output relationship
    The same input always produces the same output
    If f is a function whose output value is b when the input value is a we write
    f(a) = b
    Also called a mapping, and if f(a) = b we say that f maps a to b
    The set of possible inputs to a function is called its domain
    the outputs of a function come from a set called its range
    f is a function with domain D and range R is 
        f: D --> R
    When the domain of a function f is A1 x ... x Ak for some sets A1,...,Ak
    the input to f is a k-tuple and we call the ai, the arguments to f
    a function with k arguments is alled a k-ary function, and k is the arity of
    the function
Graphs
    an undirected graph, or simply a graph, is a set of points with lines connecting
    some of the points
    the points are called nodes or vertices and the lines edges
    The number of edges at a particular node is the degree of that node
    No more than one edge is allowed between any two nodes
    we may allow an edge from a node to itself, called a self-loop
    Sometimes we label the nodes and/or edges of a graph, which is then called a labeled graph
    We say that graph G is a subgraph of graph H if the nodes of G are a subset
    of the nodes of H and the edges of G are the edges of H on the corresponding nodes
    A Path in a graph is a sequence of nodes connected by edges
    A simple path is a path that doesn't repeat any nodes
    A graph is connected if every two nodes have a path between them
    A path is a cycle if it starts and ends in the same node
    a simple cycle is one that contains at least three nodes and repeaats
    only the first and last nodes
    a graph is a tree if it is connected and has no simple cycles 
        may contain a specially designated node called the root
    A directed graph has arrows instead of lines
        the number of arrows pointing from a particular node is the outdegree
        the number of arrows pointing to a particular node is the indegree
        A path with which all the arrows point in the same direction as its steps is called
        a directed path
        A directed path is strongly connected if a directed path connects every two nodes
        